----Tao CSDL

use master
go
drop database FS
go
create database FS
go
use FS

----Tao bang
create table Product
(
	cProID char(6) primary key not null,
	vProName varchar(50) not null,
	vProDetails varchar(500) not null,
	cVenID char(6) not null,
	cCatID char(6) not null
)

create table Category
(
	cCatID char(6) primary key not null,
	vCatName varchar(50) not null
)

create table Vendor
(
	cVenID char(6) primary key not null,
	vVenName varchar(50) not null,
	vVenAddress varchar(100) not null,
	cVenPhone char(15) not null,
	cVenFax char(15) not null,
	cVenEmail char(50) not null
)

create table Stock
(
	cStoID char(6)primary key not null,
	cProID char(6)not null,
	iProQuantity int not null,
	dDateUpdate datetime not null
)

create table StockInventory
(
	cProID char(6)not null,
	iInventory int default 0
)

create table Employee
(
	cEmpID char(6) primary key not null,
	cPerID char(6) not null,
	vEmpName varchar(50) not null,
	vEmpAddress varchar(100) not null,
	cEmpPhone char(15) not null,
	cEmpEmail char(50) not null,
	cEmpPassword char(50) not null
)

create table Customer
(
	cCusID char(6) primary key not null,
	vCusName varchar(50) not null,
	cCusSex char(6) not null,
	vCusAddress varchar(100) not null,
	cCusPhone char(15) not null,
	cCusEmail char(50) not null
)

create table Permission
(
	cPerID char(6) primary key not null,
	vPerName varchar(50) not null
)

create table Purchase
(
	cPurID char(6) primary key not null,
	dPurDate datetime not null,
	iPurTotalPrice int not null,
	iVAT int not null,
	cStatus char(100) not null,
	cEmpID char(6) not null
)

create table PurDetails
(
	cPurID char(6) not null,
	cProID char(6) not null,
	iPurQuantity int not null,
	iPurPrice int not null
	primary key (cPurID, cProID)
)

create table Orders
(
	cOrdID char(6) primary key not null,
	cCusID char(6) not null,
	dOrdDate datetime not null,
	iOrdTotalPrice int not null,
	iVAT int not null,
	cStatus char(100) not null,
	cEmpID char(6) not null
)

create table OrdDetails
(
	cOrdID char(6) not null,
	cProID char(6) not null,
	iOrdQuantity int not null,
	iOrdPrice int not null
	primary key (cOrdID, cProID)
)

---Tao fk
alter table Employee
add constraint fk_Employee_Permission foreign key (cPerID) references Permission(cPerID)

alter table Purchase
add constraint fk_Purchase_Employee foreign key (cEmpID) references Employee(cEmpID)

alter table Orders
add constraint fk_Orders_Employee foreign key (cEmpID) references Employee(cEmpID),
constraint fk_Orders_Customer foreign key (cCusID) references Customer(cCusID)

alter table PurDetails
add constraint fk_PurDetails_Purchase foreign key (cPurID) references Purchase(cPurID),
constraint fk_PurDetails_Product foreign key (cProID) references Product(cProID)

alter table OrdDetails
add constraint fk_OrdDetails_Orders foreign key (cOrdID) references Orders(cOrdID),
constraint fk_OrdDetails_Product foreign key (cProID) references Product(cProID)

alter table Product
add constraint fk_Product_Vendor foreign key (cVenID) references Vendor(cVenID),
constraint fk_Product_Category foreign key (cCatID) references Category(cCatID)

alter table Stock
add constraint fk_Stock_Product foreign key (cProID) references Product(cProID)

alter table StockInventory
add constraint fk_StockInventory_Product foreign key (cProID) references Product(cProID)


---ID tu dong tang
go
if exists (select name from sysobjects where name='prcAutoGeneratedID' and type='p')
drop proc prcAutoGeneratedID
go
create proc prcAutoGeneratedID @Table varchar(20), @ID char(6) output
as
begin
	declare @Pre char(2)
	declare @Num char(4)

	if @Table = 'Category'
        begin
            select @Pre = 'CA'
			select @Num = Max(Right(cCatID,4)) from Category
        end

	if @Table = 'Employee'
        begin
            select @Pre = 'EM'
			select @Num = Max(Right(cEmpID,4)) from Employee
        end
        
    if @Table = 'Customer'
        begin
            select @Pre = 'CU'
			select @Num = Max(Right(cCusID,4)) from Customer
        end

	if @Table = 'Orders'
        begin
            select @Pre = 'OR'
			select @Num = Max(Right(cOrdID,4)) from Orders
        end
        
	if @Table ='Permission'
        begin
        	select @Pre = 'PE'
			select @Num = Max(Right(cPerID,4)) from Permission
        end
        
	if @Table ='Product'
        begin
        	select @Pre = 'PR'
			select @Num = Max(Right(cProID,4)) from Product
        end
                
	if @Table ='Purchase'
        begin
        	select @Pre = 'PU'
			select @Num = Max(Right(cPurID,4)) from Purchase
        end
                   
	if @Table ='Stock'
        begin
        	select @Pre = 'ST'
			select @Num = Max(Right(cStoID,4)) from Stock
        end
                   
	if @Table ='Vendor'
        begin
        	select @Pre = 'VE'
			select @Num = Max(Right(cVenID,4)) from Vendor
        end
                                     
    if @Num is NULL select @Num = '0000'
	select @ID = @Pre + Left('0000',4-Len(@Num+1)) + Convert(Char(4),@Num+1)
      
end

---Tao proc insert du lieu vao bang
--Category
go
if exists (select name from sysobjects where name='prcInsertCategory' and type='p')
drop proc prcInsertCategory
go
create proc prcInsertCategory
	@vCatName varchar(50)
as
begin
	declare @cCatID char(6)
	exec prcAutoGeneratedID 'Category', @cCatID output
	insert into Category values(@cCatID, @vCatName)
end

--Employee
go
if exists (select name from sysobjects where name='prcInsertEmployee' and type='p')
drop proc prcInsertEmployee 
go
create proc prcInsertEmployee
	@cPerID char(6),
	@vEmpName varchar(50),
	@vEmpAddress varchar(100),
	@cEmpPhone char(15),
	@cEmpEmail char(50),
	@cEmpPassword char(50)
as
begin
	declare @cEmpID char(6)
	exec prcAutoGeneratedID 'Employee', @cEmpID output
	insert into Employee values(@cEmpID, @cPerID, @vEmpName, @vEmpAddress, @cEmpPhone, @cEmpEmail, @cEmpPassword)
end

--Employee
go
if exists (select name from sysobjects where name='prcInsertCustomer' and type='p')
drop proc prcInsertCustomer
go
create proc prcInsertCustomer
	@vCusName varchar(50),
	@cCusSex char(6),
	@vCusAddress varchar(100),
	@cCusPhone char(15),
	@cCusEmail char(50)
as
begin
	declare @cCusID char(6)
	exec prcAutoGeneratedID 'Customer', @cCusID output
	insert into Customer values(@cCusID, @vCusName,@cCusSex,@vCusAddress,@cCusPhone,@cCusEmail)
end
---OrdDetails
go
if exists (select name from sysobjects where name='prcInsertOrdDetails' and type='p')
drop proc prcInsertOrdDetails
go
create proc prcInsertOrdDetails
	@cOrdID char(6),
	@cProID char(6),
	@iOrdQuantity int,
	@iOrdPrice int
as
begin
	insert into OrdDetails values(@cOrdID, @cProID, @iOrdQuantity, @iOrdPrice)
end

---Orders
go
if exists (select name from sysobjects where name='prcInsertOrders' and type='p')
drop proc prcInsertOrders
go
create proc prcInsertOrders
	@dOrdDate datetime,
	@cCusID char(6),
	@iOrdTotalPrice int,
	@iVAT int,
	@cStatus char(100),
	@cEmpID char(6)
as
begin
	declare @cOrdID char(6)
	exec prcAutoGeneratedID 'Orders', @cOrdID output
	insert into Orders values(@cOrdID, @dOrdDate, @cCusID, @iOrdTotalPrice, @iVAT, @cStatus, @cEmpID)
end

---Permisson
go
if exists (select name from sysobjects where name='prcInsertPermisson' and type='p')
drop proc prcInsertPermisson
go
create proc prcInsertPermisson
	@vPerName varchar(50)
as
begin
	declare @cPerID char(6)
	exec prcAutoGeneratedID 'Permisson', @cPerID output
	insert into Permisson values(@cPerID, @vPerName)
end

---Product
go
if exists (select name from sysobjects where name='prcInsertProduct' and type='p')
drop proc prcInsertProduct
go
create proc prcInsertProduct
	@vProName varchar(50),
	@vProDetails varchar(500),
	@cVenID char(6),
	@cCatID char(6)
as
begin
	declare @cProID char(6)
	exec prcAutoGeneratedID 'Product', @cProID output
	insert into Product values(@cProID, @vProName, @vProDetails, @cVenID, @cCatID)
end

---Purchase
go
if exists (select name from sysobjects where name='prcInsertPurchase' and type='p')
drop proc prcInsertPurchase
go
create proc prcInsertPurchase
	@dPurDate datetime,
	@iPurTotalPrice int,
	@iVAT int,
	@cStatus char(100),
	@cEmpID char(6)
as
begin
	declare @cPurID char(6)
	exec prcAutoGeneratedID 'Purchase', @cPurID output
	insert into Purchase values(@cPurID, @dPurDate, @iPurTotalPrice, @iVAT, @cStatus, @cEmpID)
end

---PurDetails
go
if exists (select name from sysobjects where name='prcInsertPurDetails' and type='p')
drop proc prcInsertPurDetails
go
create proc prcInsertPurDetails
	@cPurID char(6),
	@cProID char(6),
	@iPurQuantity int,
	@iPurPrice int
as
begin
	insert into PurDetails values(@cPurID, @cProID, @iPurQuantity, @iPurPrice)
end

---Stock
go
if exists (select name from sysobjects where name='prcInsertStock' and type='p')
drop proc prcInsertStock
go
create proc prcInsertStock
	@cProID char(6),
	@iProQuantity int,
	@dDateUpdate datetime
as
begin
	declare @cStoID char(6)
	exec prcAutoGeneratedID 'Stock', @cStoID output
	insert into Stock values(@cStoID, @cProID, @iProQuantity, @dDateUpdate)
end

---StockInventory
go
create trigger trgInventory_insertProduct
on Product
for insert
as
begin
	declare @cProID char(6)
	select @cProID = cProID from inserted
	insert into StockInventory(cProID) values (@cProID)
end

go
create trigger trgInventory_insertPurchaseDetails
on PurDetails
for insert
as
begin
	declare @cProID char(6)
	select @cProID = cProID from inserted
	declare @iPurQuantity int
	select @iPurQuantity = iPurQuantity from inserted
	declare @iInventory int
	select @iInventory = StockInventory.iInventory from inserted join Product on inserted.cProID=Product.cProID join StockInventory on Product.cProID=StockInventory.cProID
	select @iInventory = @iInventory + @iPurQuantity
	
	update StockInventory set iInventory = @iInventory where cProID = @cProID
end

go
create trigger trgInventory_insertOrderDetails
on OrdDetails
for insert
as
begin
	declare @cProID char(6)
	select @cProID = cProID from inserted
	declare @iOrdQuantity int
	select @iOrdQuantity = iOrdQuantity from inserted
	declare @iInventory int
	select @iInventory = StockInventory.iInventory from inserted join Product on inserted.cProID=Product.cProID join StockInventory on Product.cProID=StockInventory.cProID
	select @iInventory = @iInventory - @iOrdQuantity
	
	update StockInventory set iInventory = @iInventory where cProID = @cProID
end

go
create trigger trgInventory_deleteStock
on Stock
for delete
as
begin
	declare @cProID char(6)
	select @cProID = cProID from deleted
	declare @iProQuantity int
	select @iProQuantity = iProQuantity from deleted
	declare @iInventory int
	select @iInventory = StockInventory.iInventory from deleted join Product on deleted.cProID=Product.cProID join StockInventory on Product.cProID=StockInventory.cProID
	select @iInventory = @iInventory - @iProQuantity
	
	update StockInventory set iInventory = @iInventory where cProID = @cProID
end

---Vendor
go
if exists (select name from sysobjects where name='prcInsertVendor' and type='p')
drop proc prcInsertVendor
go
create proc prcInsertVendor
	@vVenName varchar(50),
	@vVenAddress varchar(100),
	@cVenPhone char(15),
	@cVenFax char(15),
	@cVenEmail char(50)
as
begin
	declare @cVenID char(6)
	exec prcAutoGeneratedID 'Vendor', @cVenID output
	insert into Vendor values(@cVenID, @vVenName, @vVenAddress, @cVenPhone, @cVenFax, @cVenEmail)
end


-- Sua du lieu trong bang
--Customer
go
create proc prcUpdateCustomer(@customerID char(10),@customerName varchar(50),@sex char(6),@address varchar(100),@phoneNumber char(15),@email char(100) )
as
begin
	update Customer set vCusName =@customerName,cCusSex = @sex, vCusAddress=@address,cCusPhone=@phoneNumber,cCusEmail=@email
	where cCusID=@customerID
end
--Employee 
go
create proc prcUpdateEmployee (@cEmpID char(6),
	@cPerID char(6),
	@vEmpName varchar(50),
	@vEmpAddress varchar(100),
	@cEmpPhone char(15),
	@cEmpEmail char(50),
	@cEmpPassword char(50))
as
begin
	update Employee set cPerID=@cPerID,
	vEmpName = @vEmpName, 
	vEmpAddress=@vEmpAddress,
	cEmpPhone=@cEmpPhone,
	cEmpEmail=@cEmpEmail,
	cEmpPassword=@cEmpPassword
	where cEmpID=@cEmpID
end
--Category
go
create proc prcUpdateCategory (@cCatID char(6),
	@vCatName varchar(50))
as
begin
	update Category set vCatName=@vCatName
	where cCatID=@cCatID
end
--OrdDetails
go
create proc prcUpdateOrdDetails (@cOrdID char(6),
	@cProID char(6),
	@iOrdQuantity int,
	@iOrdPrice int)
as
begin
	update OrdDetails set cProID =@cProID ,
	iOrdQuantity = @iOrdQuantity, 
	iOrdPrice=@iOrdPrice
	where cOrdID=@cOrdID
end
--Orders
go
create proc prcUpdateOrders (@cOrdID char(6),
	@dOrdDate datetime,
	@cCusID char(6),
	@iOrdTotalPrice int,
	@iVAT int,
	@cStatus char(100),
	@cEmpID char(6))
as
begin
	update Orders set dOrdDate=@dOrdDate,
	cCusID = @cCusID, 
	iOrdTotalPrice=@iOrdTotalPrice,
	iVAT=@iVAT,
	cStatus=@cStatus,
	cEmpID=@cEmpID
	where cOrdID=@cOrdID
end
--Permisson
go
create proc prcUpdatePermisson (@cPerID char(6),
	@vPerName varchar(50))
as
begin
	update Permisson set vPerName=@vPerName
	where cPerID=@cPerID
end
--Product
go
create proc prcUpdateProduct(@cProID char(6),
	@vProName varchar(50),
	@vProDetails varchar(500),
	@cVenID char(6),
	@cCatID char(6))
as
begin
	update Product set vProName=@vProName,
	vProDetails = @vProDetails, 
	cVenID=@cVenID,
	cCatID=@cCatID
	where cProID=@cProID
end
--Purchase
go
create proc prcUpdatePurchase (@cPurID char(6),
	@dPurDate datetime,
	@iPurTotalPrice int,
	@iVAT int,
	@cStatus char(100),
	@cEmpID char(6))
as
begin
	update Purchase set dPurDate=@dPurDate,
	iPurTotalPrice = @iPurTotalPrice, 
	iVAT=@iVAT,
	cStatus=@cStatus,
	cEmpID=@cEmpID
	where cPurID=@cPurID
end
--PurDetails
go
create proc prcUpdatePurDetails (@cPurID char(6),
	@cProID char(6),
	@iPurQuantity int,
	@iPurPrice int)
as
begin
	update PurDetails set cProID=@cProID,
	iPurQuantity = @iPurQuantity, 
	iPurPrice=@iPurPrice
	where cPurID=@cPurID
end
--Stock
go
create proc prcUpdateStock (@cStoID char(6),
	@cProID char(6),
	@iProQuantity int,
	@dDateUpdate datetime)
as
begin
	update Stock set cProID=@cProID,
	iProQuantity = @iProQuantity, 
	dDateUpdate=@dDateUpdate
	where cStoID=@cStoID
end
--Vendor
go
create proc prcUpdateVendor (@cVenID char(6),
	@vVenName varchar(50),
	@vVenAddress varchar(100),
	@cVenPhone char(15),
	@cVenFax char(15),
	@cVenEmail char(50))
as
begin
	update Vendor set vVenName=@vVenName,
	vVenAddress = @vVenAddress, 
	cVenPhone=@cVenPhone,
	cVenFax=@cVenFax,
	cVenEmail=@cVenEmail
	where cVenID=@cVenID
end



---Xoa du lieu
--Category
go
create proc prcDeleteCategory(@cCatID char(6))
as
begin
	Delete Category where cCatID = @cCatID
end
--Customer
go
create proc prcDeleteCustomer(@customerID char(6))
as
begin
	Delete Customer where cCusID = @customerID
end
--Employee
go
create proc prcDeleteEmployee(@cEmpID char(6))
as
begin
	Delete Employee where cEmpID = @cEmpID
end
--OrdDetails
go
create proc prcDeleteOrdDetails(@cOrdID char(6), @cProID char(6))
as
begin
	Delete OrdDetails where (cOrdID = @cOrdID and cProID = @cProID)
end
--Orders
go
create proc prcDeleteOrders(@cOrdID char(6))
as
begin
	Delete Orders where cOrdID = @cOrdID
end
--Permission
go
create proc prcDeletePermission(@cPerID char(6))
as
begin
	Delete Permission where cPerID = @cPerID
end
--Product
go
create proc prcDeleteProduct(@cProID char(6))
as
begin
	Delete Product where cProID = @cProID
end
--Purchase
go
create proc prcDeletePurchase(@cPurID char(6))
as
begin
	Delete Purchase where cPurID = @cPurID
end
--PurDetails
go
create proc prcDeletePurDetails(@cPurID char(6), @cProID char(6))
as
begin
	Delete PurDetails where (cPurID = @cPurID and cProID = @cProID)
end
--Stock
go
create proc prcDeleteStock(@cStoID char(6))
as
begin
	Delete Stock where cStoID = @cStoID
end
--Vendor
go
create proc prcDeleteVendor(@cVenID char(6))
as
begin
	Delete Vendor where cVenID = @cVenID
end
